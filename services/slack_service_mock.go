// Code generated by MockGen. DO NOT EDIT.
// Source: slack_service.go

// Package mock_services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlackService is a mock of SlackService interface.
type MockSlackService struct {
	ctrl     *gomock.Controller
	recorder *MockSlackServiceMockRecorder
}

// MockSlackServiceMockRecorder is the mock recorder for MockSlackService.
type MockSlackServiceMockRecorder struct {
	mock *MockSlackService
}

// NewMockSlackService creates a new mock instance.
func NewMockSlackService(ctrl *gomock.Controller) *MockSlackService {
	mock := &MockSlackService{ctrl: ctrl}
	mock.recorder = &MockSlackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackService) EXPECT() *MockSlackServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockSlackService) GetAllUsers() ([]SlackUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]SlackUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockSlackServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockSlackService)(nil).GetAllUsers))
}

// ReplyMessage mocks base method.
func (m *MockSlackService) ReplyMessage(channel, text, messageTimestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyMessage", channel, text, messageTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyMessage indicates an expected call of ReplyMessage.
func (mr *MockSlackServiceMockRecorder) ReplyMessage(channel, text, messageTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyMessage", reflect.TypeOf((*MockSlackService)(nil).ReplyMessage), channel, text, messageTimestamp)
}
